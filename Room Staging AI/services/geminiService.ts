// Fix: Import necessary modules from @google/genai.
import { GoogleGenAI, Modality } from "@google/genai";
import { StagingStyle } from '../types';

// Fix: Initialize GoogleGenAI with API key from environment variables.
const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

// Helper function to convert File to a base64 string and get MIME type.
const fileToGenerativePart = async (file: File) => {
    const base64EncodedDataPromise = new Promise<string>((resolve) => {
        const reader = new FileReader();
        reader.onloadend = () => {
            if (typeof reader.result === 'string') {
                // The result includes the data URL prefix (e.g., "data:image/jpeg;base64,"),
                // so we need to remove it.
                resolve(reader.result.split(',')[1]);
            } else {
                resolve(''); // Should not happen with readAsDataURL
            }
        };
        reader.readAsDataURL(file);
    });
    return {
        inlineData: {
            data: await base64EncodedDataPromise,
            mimeType: file.type,
        },
    };
};

export const stageRoom = async (
    imageFile: File,
    style: StagingStyle,
    description: string
): Promise<string> => {
    try {
        const imagePart = await fileToGenerativePart(imageFile);
        const prompt = `Virtually stage this empty room in a ${style} style. ${description}`;

        const textPart = {
            text: prompt,
        };

        // Fix: Use the 'gemini-2.5-flash-image' model for image editing tasks.
        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash-image',
            contents: {
                parts: [
                    imagePart,
                    textPart,
                ],
            },
            // Fix: responseModalities must be an array with a single Modality.IMAGE element for image generation.
            config: {
                responseModalities: [Modality.IMAGE],
            },
        });
        
        // Fix: Correctly extract the image data from the response by iterating through content parts.
        for (const part of response.candidates[0].content.parts) {
            if (part.inlineData) {
                const base64ImageBytes: string = part.inlineData.data;
                const mimeType = part.inlineData.mimeType;
                return `data:${mimeType};base64,${base64ImageBytes}`;
            }
        }
        
        throw new Error("No image was generated by the AI.");

    } catch (error) {
        console.error("Error staging room:", error);
        throw new Error("Failed to stage the room. Please check the console for more details.");
    }
};
